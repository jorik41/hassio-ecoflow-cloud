"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class InverterHeartbeat(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INV_ERROR_CODE_FIELD_NUMBER: builtins.int
    INV_WARNING_CODE_FIELD_NUMBER: builtins.int
    PV1_ERROR_CODE_FIELD_NUMBER: builtins.int
    PV1_WARNING_CODE_FIELD_NUMBER: builtins.int
    PV2_ERROR_CODE_FIELD_NUMBER: builtins.int
    PV2_WARNING_CODE_FIELD_NUMBER: builtins.int
    BAT_ERROR_CODE_FIELD_NUMBER: builtins.int
    BAT_WARNING_CODE_FIELD_NUMBER: builtins.int
    LLC_ERROR_CODE_FIELD_NUMBER: builtins.int
    LLC_WARNING_CODE_FIELD_NUMBER: builtins.int
    PV1_STATUE_FIELD_NUMBER: builtins.int
    PV2_STATUE_FIELD_NUMBER: builtins.int
    BAT_STATUE_FIELD_NUMBER: builtins.int
    LLC_STATUE_FIELD_NUMBER: builtins.int
    INV_STATUE_FIELD_NUMBER: builtins.int
    PV1_INPUT_VOLT_FIELD_NUMBER: builtins.int
    PV1_OP_VOLT_FIELD_NUMBER: builtins.int
    PV1_INPUT_CUR_FIELD_NUMBER: builtins.int
    PV1_INPUT_WATTS_FIELD_NUMBER: builtins.int
    PV1_TEMP_FIELD_NUMBER: builtins.int
    PV2_INPUT_VOLT_FIELD_NUMBER: builtins.int
    PV2_OP_VOLT_FIELD_NUMBER: builtins.int
    PV2_INPUT_CUR_FIELD_NUMBER: builtins.int
    PV2_INPUT_WATTS_FIELD_NUMBER: builtins.int
    PV2_TEMP_FIELD_NUMBER: builtins.int
    BAT_INPUT_VOLT_FIELD_NUMBER: builtins.int
    BAT_OP_VOLT_FIELD_NUMBER: builtins.int
    BAT_INPUT_CUR_FIELD_NUMBER: builtins.int
    BAT_INPUT_WATTS_FIELD_NUMBER: builtins.int
    BAT_TEMP_FIELD_NUMBER: builtins.int
    BAT_SOC_FIELD_NUMBER: builtins.int
    LLC_INPUT_VOLT_FIELD_NUMBER: builtins.int
    LLC_OP_VOLT_FIELD_NUMBER: builtins.int
    LLC_TEMP_FIELD_NUMBER: builtins.int
    INV_INPUT_VOLT_FIELD_NUMBER: builtins.int
    INV_OP_VOLT_FIELD_NUMBER: builtins.int
    INV_OUTPUT_CUR_FIELD_NUMBER: builtins.int
    INV_OUTPUT_WATTS_FIELD_NUMBER: builtins.int
    INV_TEMP_FIELD_NUMBER: builtins.int
    INV_FREQ_FIELD_NUMBER: builtins.int
    INV_DC_CUR_FIELD_NUMBER: builtins.int
    BP_TYPE_FIELD_NUMBER: builtins.int
    INV_RELAY_STATUS_FIELD_NUMBER: builtins.int
    PV1_RELAY_STATUS_FIELD_NUMBER: builtins.int
    PV2_RELAY_STATUS_FIELD_NUMBER: builtins.int
    INSTALL_COUNTRY_FIELD_NUMBER: builtins.int
    INSTALL_TOWN_FIELD_NUMBER: builtins.int
    PERMANENT_WATTS_FIELD_NUMBER: builtins.int
    DYNAMIC_WATTS_FIELD_NUMBER: builtins.int
    SUPPLY_PRIORITY_FIELD_NUMBER: builtins.int
    LOWER_LIMIT_FIELD_NUMBER: builtins.int
    UPPER_LIMIT_FIELD_NUMBER: builtins.int
    INV_ON_OFF_FIELD_NUMBER: builtins.int
    WIRELESS_ERROR_CODE_FIELD_NUMBER: builtins.int
    WIRELESS_WARNING_CODE_FIELD_NUMBER: builtins.int
    INV_BRIGHTNESS_FIELD_NUMBER: builtins.int
    HEARTBEAT_FREQUENCY_FIELD_NUMBER: builtins.int
    RATED_POWER_FIELD_NUMBER: builtins.int
    CHG_REMAIN_TIME_FIELD_NUMBER: builtins.int
    DSG_REMAIN_TIME_FIELD_NUMBER: builtins.int
    FEED_PROTECT_FIELD_NUMBER: builtins.int
    inv_error_code: builtins.int
    inv_warning_code: builtins.int
    pv1_error_code: builtins.int
    pv1_warning_code: builtins.int
    pv2_error_code: builtins.int
    pv2_warning_code: builtins.int
    bat_error_code: builtins.int
    bat_warning_code: builtins.int
    llc_error_code: builtins.int
    llc_warning_code: builtins.int
    pv1_statue: builtins.int
    pv2_statue: builtins.int
    bat_statue: builtins.int
    llc_statue: builtins.int
    inv_statue: builtins.int
    pv1_input_volt: builtins.int
    pv1_op_volt: builtins.int
    pv1_input_cur: builtins.int
    pv1_input_watts: builtins.int
    pv1_temp: builtins.int
    pv2_input_volt: builtins.int
    pv2_op_volt: builtins.int
    pv2_input_cur: builtins.int
    pv2_input_watts: builtins.int
    pv2_temp: builtins.int
    bat_input_volt: builtins.int
    bat_op_volt: builtins.int
    bat_input_cur: builtins.int
    bat_input_watts: builtins.int
    bat_temp: builtins.int
    bat_soc: builtins.int
    llc_input_volt: builtins.int
    llc_op_volt: builtins.int
    llc_temp: builtins.int
    inv_input_volt: builtins.int
    inv_op_volt: builtins.int
    inv_output_cur: builtins.int
    inv_output_watts: builtins.int
    inv_temp: builtins.int
    inv_freq: builtins.int
    inv_dc_cur: builtins.int
    bp_type: builtins.int
    inv_relay_status: builtins.int
    pv1_relay_status: builtins.int
    pv2_relay_status: builtins.int
    install_country: builtins.int
    install_town: builtins.int
    permanent_watts: builtins.int
    dynamic_watts: builtins.int
    supply_priority: builtins.int
    lower_limit: builtins.int
    upper_limit: builtins.int
    inv_on_off: builtins.int
    wireless_error_code: builtins.int
    wireless_warning_code: builtins.int
    inv_brightness: builtins.int
    heartbeat_frequency: builtins.int
    rated_power: builtins.int
    chg_remain_time: builtins.int
    dsg_remain_time: builtins.int
    feed_protect: builtins.int
    def __init__(
        self,
        *,
        inv_error_code: builtins.int | None = ...,
        inv_warning_code: builtins.int | None = ...,
        pv1_error_code: builtins.int | None = ...,
        pv1_warning_code: builtins.int | None = ...,
        pv2_error_code: builtins.int | None = ...,
        pv2_warning_code: builtins.int | None = ...,
        bat_error_code: builtins.int | None = ...,
        bat_warning_code: builtins.int | None = ...,
        llc_error_code: builtins.int | None = ...,
        llc_warning_code: builtins.int | None = ...,
        pv1_statue: builtins.int | None = ...,
        pv2_statue: builtins.int | None = ...,
        bat_statue: builtins.int | None = ...,
        llc_statue: builtins.int | None = ...,
        inv_statue: builtins.int | None = ...,
        pv1_input_volt: builtins.int | None = ...,
        pv1_op_volt: builtins.int | None = ...,
        pv1_input_cur: builtins.int | None = ...,
        pv1_input_watts: builtins.int | None = ...,
        pv1_temp: builtins.int | None = ...,
        pv2_input_volt: builtins.int | None = ...,
        pv2_op_volt: builtins.int | None = ...,
        pv2_input_cur: builtins.int | None = ...,
        pv2_input_watts: builtins.int | None = ...,
        pv2_temp: builtins.int | None = ...,
        bat_input_volt: builtins.int | None = ...,
        bat_op_volt: builtins.int | None = ...,
        bat_input_cur: builtins.int | None = ...,
        bat_input_watts: builtins.int | None = ...,
        bat_temp: builtins.int | None = ...,
        bat_soc: builtins.int | None = ...,
        llc_input_volt: builtins.int | None = ...,
        llc_op_volt: builtins.int | None = ...,
        llc_temp: builtins.int | None = ...,
        inv_input_volt: builtins.int | None = ...,
        inv_op_volt: builtins.int | None = ...,
        inv_output_cur: builtins.int | None = ...,
        inv_output_watts: builtins.int | None = ...,
        inv_temp: builtins.int | None = ...,
        inv_freq: builtins.int | None = ...,
        inv_dc_cur: builtins.int | None = ...,
        bp_type: builtins.int | None = ...,
        inv_relay_status: builtins.int | None = ...,
        pv1_relay_status: builtins.int | None = ...,
        pv2_relay_status: builtins.int | None = ...,
        install_country: builtins.int | None = ...,
        install_town: builtins.int | None = ...,
        permanent_watts: builtins.int | None = ...,
        dynamic_watts: builtins.int | None = ...,
        supply_priority: builtins.int | None = ...,
        lower_limit: builtins.int | None = ...,
        upper_limit: builtins.int | None = ...,
        inv_on_off: builtins.int | None = ...,
        wireless_error_code: builtins.int | None = ...,
        wireless_warning_code: builtins.int | None = ...,
        inv_brightness: builtins.int | None = ...,
        heartbeat_frequency: builtins.int | None = ...,
        rated_power: builtins.int | None = ...,
        chg_remain_time: builtins.int | None = ...,
        dsg_remain_time: builtins.int | None = ...,
        feed_protect: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_bat_error_code", b"_bat_error_code", "_bat_input_cur", b"_bat_input_cur", "_bat_input_volt", b"_bat_input_volt", "_bat_input_watts", b"_bat_input_watts", "_bat_op_volt", b"_bat_op_volt", "_bat_soc", b"_bat_soc", "_bat_statue", b"_bat_statue", "_bat_temp", b"_bat_temp", "_bat_warning_code", b"_bat_warning_code", "_bp_type", b"_bp_type", "_chg_remain_time", b"_chg_remain_time", "_dsg_remain_time", b"_dsg_remain_time", "_dynamic_watts", b"_dynamic_watts", "_feed_protect", b"_feed_protect", "_heartbeat_frequency", b"_heartbeat_frequency", "_install_country", b"_install_country", "_install_town", b"_install_town", "_inv_brightness", b"_inv_brightness", "_inv_dc_cur", b"_inv_dc_cur", "_inv_error_code", b"_inv_error_code", "_inv_freq", b"_inv_freq", "_inv_input_volt", b"_inv_input_volt", "_inv_on_off", b"_inv_on_off", "_inv_op_volt", b"_inv_op_volt", "_inv_output_cur", b"_inv_output_cur", "_inv_output_watts", b"_inv_output_watts", "_inv_relay_status", b"_inv_relay_status", "_inv_statue", b"_inv_statue", "_inv_temp", b"_inv_temp", "_inv_warning_code", b"_inv_warning_code", "_llc_error_code", b"_llc_error_code", "_llc_input_volt", b"_llc_input_volt", "_llc_op_volt", b"_llc_op_volt", "_llc_statue", b"_llc_statue", "_llc_temp", b"_llc_temp", "_llc_warning_code", b"_llc_warning_code", "_lower_limit", b"_lower_limit", "_permanent_watts", b"_permanent_watts", "_pv1_error_code", b"_pv1_error_code", "_pv1_input_cur", b"_pv1_input_cur", "_pv1_input_volt", b"_pv1_input_volt", "_pv1_input_watts", b"_pv1_input_watts", "_pv1_op_volt", b"_pv1_op_volt", "_pv1_relay_status", b"_pv1_relay_status", "_pv1_statue", b"_pv1_statue", "_pv1_temp", b"_pv1_temp", "_pv1_warning_code", b"_pv1_warning_code", "_pv2_error_code", b"_pv2_error_code", "_pv2_input_cur", b"_pv2_input_cur", "_pv2_input_volt", b"_pv2_input_volt", "_pv2_input_watts", b"_pv2_input_watts", "_pv2_op_volt", b"_pv2_op_volt", "_pv2_relay_status", b"_pv2_relay_status", "_pv2_statue", b"_pv2_statue", "_pv2_temp", b"_pv2_temp", "_pv2_warning_code", b"_pv2_warning_code", "_rated_power", b"_rated_power", "_supply_priority", b"_supply_priority", "_upper_limit", b"_upper_limit", "_wireless_error_code", b"_wireless_error_code", "_wireless_warning_code", b"_wireless_warning_code", "bat_error_code", b"bat_error_code", "bat_input_cur", b"bat_input_cur", "bat_input_volt", b"bat_input_volt", "bat_input_watts", b"bat_input_watts", "bat_op_volt", b"bat_op_volt", "bat_soc", b"bat_soc", "bat_statue", b"bat_statue", "bat_temp", b"bat_temp", "bat_warning_code", b"bat_warning_code", "bp_type", b"bp_type", "chg_remain_time", b"chg_remain_time", "dsg_remain_time", b"dsg_remain_time", "dynamic_watts", b"dynamic_watts", "feed_protect", b"feed_protect", "heartbeat_frequency", b"heartbeat_frequency", "install_country", b"install_country", "install_town", b"install_town", "inv_brightness", b"inv_brightness", "inv_dc_cur", b"inv_dc_cur", "inv_error_code", b"inv_error_code", "inv_freq", b"inv_freq", "inv_input_volt", b"inv_input_volt", "inv_on_off", b"inv_on_off", "inv_op_volt", b"inv_op_volt", "inv_output_cur", b"inv_output_cur", "inv_output_watts", b"inv_output_watts", "inv_relay_status", b"inv_relay_status", "inv_statue", b"inv_statue", "inv_temp", b"inv_temp", "inv_warning_code", b"inv_warning_code", "llc_error_code", b"llc_error_code", "llc_input_volt", b"llc_input_volt", "llc_op_volt", b"llc_op_volt", "llc_statue", b"llc_statue", "llc_temp", b"llc_temp", "llc_warning_code", b"llc_warning_code", "lower_limit", b"lower_limit", "permanent_watts", b"permanent_watts", "pv1_error_code", b"pv1_error_code", "pv1_input_cur", b"pv1_input_cur", "pv1_input_volt", b"pv1_input_volt", "pv1_input_watts", b"pv1_input_watts", "pv1_op_volt", b"pv1_op_volt", "pv1_relay_status", b"pv1_relay_status", "pv1_statue", b"pv1_statue", "pv1_temp", b"pv1_temp", "pv1_warning_code", b"pv1_warning_code", "pv2_error_code", b"pv2_error_code", "pv2_input_cur", b"pv2_input_cur", "pv2_input_volt", b"pv2_input_volt", "pv2_input_watts", b"pv2_input_watts", "pv2_op_volt", b"pv2_op_volt", "pv2_relay_status", b"pv2_relay_status", "pv2_statue", b"pv2_statue", "pv2_temp", b"pv2_temp", "pv2_warning_code", b"pv2_warning_code", "rated_power", b"rated_power", "supply_priority", b"supply_priority", "upper_limit", b"upper_limit", "wireless_error_code", b"wireless_error_code", "wireless_warning_code", b"wireless_warning_code"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_bat_error_code", b"_bat_error_code", "_bat_input_cur", b"_bat_input_cur", "_bat_input_volt", b"_bat_input_volt", "_bat_input_watts", b"_bat_input_watts", "_bat_op_volt", b"_bat_op_volt", "_bat_soc", b"_bat_soc", "_bat_statue", b"_bat_statue", "_bat_temp", b"_bat_temp", "_bat_warning_code", b"_bat_warning_code", "_bp_type", b"_bp_type", "_chg_remain_time", b"_chg_remain_time", "_dsg_remain_time", b"_dsg_remain_time", "_dynamic_watts", b"_dynamic_watts", "_feed_protect", b"_feed_protect", "_heartbeat_frequency", b"_heartbeat_frequency", "_install_country", b"_install_country", "_install_town", b"_install_town", "_inv_brightness", b"_inv_brightness", "_inv_dc_cur", b"_inv_dc_cur", "_inv_error_code", b"_inv_error_code", "_inv_freq", b"_inv_freq", "_inv_input_volt", b"_inv_input_volt", "_inv_on_off", b"_inv_on_off", "_inv_op_volt", b"_inv_op_volt", "_inv_output_cur", b"_inv_output_cur", "_inv_output_watts", b"_inv_output_watts", "_inv_relay_status", b"_inv_relay_status", "_inv_statue", b"_inv_statue", "_inv_temp", b"_inv_temp", "_inv_warning_code", b"_inv_warning_code", "_llc_error_code", b"_llc_error_code", "_llc_input_volt", b"_llc_input_volt", "_llc_op_volt", b"_llc_op_volt", "_llc_statue", b"_llc_statue", "_llc_temp", b"_llc_temp", "_llc_warning_code", b"_llc_warning_code", "_lower_limit", b"_lower_limit", "_permanent_watts", b"_permanent_watts", "_pv1_error_code", b"_pv1_error_code", "_pv1_input_cur", b"_pv1_input_cur", "_pv1_input_volt", b"_pv1_input_volt", "_pv1_input_watts", b"_pv1_input_watts", "_pv1_op_volt", b"_pv1_op_volt", "_pv1_relay_status", b"_pv1_relay_status", "_pv1_statue", b"_pv1_statue", "_pv1_temp", b"_pv1_temp", "_pv1_warning_code", b"_pv1_warning_code", "_pv2_error_code", b"_pv2_error_code", "_pv2_input_cur", b"_pv2_input_cur", "_pv2_input_volt", b"_pv2_input_volt", "_pv2_input_watts", b"_pv2_input_watts", "_pv2_op_volt", b"_pv2_op_volt", "_pv2_relay_status", b"_pv2_relay_status", "_pv2_statue", b"_pv2_statue", "_pv2_temp", b"_pv2_temp", "_pv2_warning_code", b"_pv2_warning_code", "_rated_power", b"_rated_power", "_supply_priority", b"_supply_priority", "_upper_limit", b"_upper_limit", "_wireless_error_code", b"_wireless_error_code", "_wireless_warning_code", b"_wireless_warning_code", "bat_error_code", b"bat_error_code", "bat_input_cur", b"bat_input_cur", "bat_input_volt", b"bat_input_volt", "bat_input_watts", b"bat_input_watts", "bat_op_volt", b"bat_op_volt", "bat_soc", b"bat_soc", "bat_statue", b"bat_statue", "bat_temp", b"bat_temp", "bat_warning_code", b"bat_warning_code", "bp_type", b"bp_type", "chg_remain_time", b"chg_remain_time", "dsg_remain_time", b"dsg_remain_time", "dynamic_watts", b"dynamic_watts", "feed_protect", b"feed_protect", "heartbeat_frequency", b"heartbeat_frequency", "install_country", b"install_country", "install_town", b"install_town", "inv_brightness", b"inv_brightness", "inv_dc_cur", b"inv_dc_cur", "inv_error_code", b"inv_error_code", "inv_freq", b"inv_freq", "inv_input_volt", b"inv_input_volt", "inv_on_off", b"inv_on_off", "inv_op_volt", b"inv_op_volt", "inv_output_cur", b"inv_output_cur", "inv_output_watts", b"inv_output_watts", "inv_relay_status", b"inv_relay_status", "inv_statue", b"inv_statue", "inv_temp", b"inv_temp", "inv_warning_code", b"inv_warning_code", "llc_error_code", b"llc_error_code", "llc_input_volt", b"llc_input_volt", "llc_op_volt", b"llc_op_volt", "llc_statue", b"llc_statue", "llc_temp", b"llc_temp", "llc_warning_code", b"llc_warning_code", "lower_limit", b"lower_limit", "permanent_watts", b"permanent_watts", "pv1_error_code", b"pv1_error_code", "pv1_input_cur", b"pv1_input_cur", "pv1_input_volt", b"pv1_input_volt", "pv1_input_watts", b"pv1_input_watts", "pv1_op_volt", b"pv1_op_volt", "pv1_relay_status", b"pv1_relay_status", "pv1_statue", b"pv1_statue", "pv1_temp", b"pv1_temp", "pv1_warning_code", b"pv1_warning_code", "pv2_error_code", b"pv2_error_code", "pv2_input_cur", b"pv2_input_cur", "pv2_input_volt", b"pv2_input_volt", "pv2_input_watts", b"pv2_input_watts", "pv2_op_volt", b"pv2_op_volt", "pv2_relay_status", b"pv2_relay_status", "pv2_statue", b"pv2_statue", "pv2_temp", b"pv2_temp", "pv2_warning_code", b"pv2_warning_code", "rated_power", b"rated_power", "supply_priority", b"supply_priority", "upper_limit", b"upper_limit", "wireless_error_code", b"wireless_error_code", "wireless_warning_code", b"wireless_warning_code"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_bat_error_code", b"_bat_error_code"]) -> typing.Literal["bat_error_code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_bat_input_cur", b"_bat_input_cur"]) -> typing.Literal["bat_input_cur"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_bat_input_volt", b"_bat_input_volt"]) -> typing.Literal["bat_input_volt"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_bat_input_watts", b"_bat_input_watts"]) -> typing.Literal["bat_input_watts"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_bat_op_volt", b"_bat_op_volt"]) -> typing.Literal["bat_op_volt"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_bat_soc", b"_bat_soc"]) -> typing.Literal["bat_soc"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_bat_statue", b"_bat_statue"]) -> typing.Literal["bat_statue"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_bat_temp", b"_bat_temp"]) -> typing.Literal["bat_temp"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_bat_warning_code", b"_bat_warning_code"]) -> typing.Literal["bat_warning_code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_bp_type", b"_bp_type"]) -> typing.Literal["bp_type"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_chg_remain_time", b"_chg_remain_time"]) -> typing.Literal["chg_remain_time"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_dsg_remain_time", b"_dsg_remain_time"]) -> typing.Literal["dsg_remain_time"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_dynamic_watts", b"_dynamic_watts"]) -> typing.Literal["dynamic_watts"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_feed_protect", b"_feed_protect"]) -> typing.Literal["feed_protect"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_heartbeat_frequency", b"_heartbeat_frequency"]) -> typing.Literal["heartbeat_frequency"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_install_country", b"_install_country"]) -> typing.Literal["install_country"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_install_town", b"_install_town"]) -> typing.Literal["install_town"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_brightness", b"_inv_brightness"]) -> typing.Literal["inv_brightness"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_dc_cur", b"_inv_dc_cur"]) -> typing.Literal["inv_dc_cur"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_error_code", b"_inv_error_code"]) -> typing.Literal["inv_error_code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_freq", b"_inv_freq"]) -> typing.Literal["inv_freq"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_input_volt", b"_inv_input_volt"]) -> typing.Literal["inv_input_volt"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_on_off", b"_inv_on_off"]) -> typing.Literal["inv_on_off"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_op_volt", b"_inv_op_volt"]) -> typing.Literal["inv_op_volt"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_output_cur", b"_inv_output_cur"]) -> typing.Literal["inv_output_cur"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_output_watts", b"_inv_output_watts"]) -> typing.Literal["inv_output_watts"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_relay_status", b"_inv_relay_status"]) -> typing.Literal["inv_relay_status"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_statue", b"_inv_statue"]) -> typing.Literal["inv_statue"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_temp", b"_inv_temp"]) -> typing.Literal["inv_temp"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_warning_code", b"_inv_warning_code"]) -> typing.Literal["inv_warning_code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_llc_error_code", b"_llc_error_code"]) -> typing.Literal["llc_error_code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_llc_input_volt", b"_llc_input_volt"]) -> typing.Literal["llc_input_volt"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_llc_op_volt", b"_llc_op_volt"]) -> typing.Literal["llc_op_volt"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_llc_statue", b"_llc_statue"]) -> typing.Literal["llc_statue"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_llc_temp", b"_llc_temp"]) -> typing.Literal["llc_temp"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_llc_warning_code", b"_llc_warning_code"]) -> typing.Literal["llc_warning_code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_lower_limit", b"_lower_limit"]) -> typing.Literal["lower_limit"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_permanent_watts", b"_permanent_watts"]) -> typing.Literal["permanent_watts"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv1_error_code", b"_pv1_error_code"]) -> typing.Literal["pv1_error_code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv1_input_cur", b"_pv1_input_cur"]) -> typing.Literal["pv1_input_cur"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv1_input_volt", b"_pv1_input_volt"]) -> typing.Literal["pv1_input_volt"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv1_input_watts", b"_pv1_input_watts"]) -> typing.Literal["pv1_input_watts"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv1_op_volt", b"_pv1_op_volt"]) -> typing.Literal["pv1_op_volt"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv1_relay_status", b"_pv1_relay_status"]) -> typing.Literal["pv1_relay_status"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv1_statue", b"_pv1_statue"]) -> typing.Literal["pv1_statue"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv1_temp", b"_pv1_temp"]) -> typing.Literal["pv1_temp"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv1_warning_code", b"_pv1_warning_code"]) -> typing.Literal["pv1_warning_code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv2_error_code", b"_pv2_error_code"]) -> typing.Literal["pv2_error_code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv2_input_cur", b"_pv2_input_cur"]) -> typing.Literal["pv2_input_cur"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv2_input_volt", b"_pv2_input_volt"]) -> typing.Literal["pv2_input_volt"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv2_input_watts", b"_pv2_input_watts"]) -> typing.Literal["pv2_input_watts"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv2_op_volt", b"_pv2_op_volt"]) -> typing.Literal["pv2_op_volt"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv2_relay_status", b"_pv2_relay_status"]) -> typing.Literal["pv2_relay_status"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv2_statue", b"_pv2_statue"]) -> typing.Literal["pv2_statue"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv2_temp", b"_pv2_temp"]) -> typing.Literal["pv2_temp"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv2_warning_code", b"_pv2_warning_code"]) -> typing.Literal["pv2_warning_code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_rated_power", b"_rated_power"]) -> typing.Literal["rated_power"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_supply_priority", b"_supply_priority"]) -> typing.Literal["supply_priority"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_upper_limit", b"_upper_limit"]) -> typing.Literal["upper_limit"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_wireless_error_code", b"_wireless_error_code"]) -> typing.Literal["wireless_error_code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_wireless_warning_code", b"_wireless_warning_code"]) -> typing.Literal["wireless_warning_code"] | None: ...

global___InverterHeartbeat = InverterHeartbeat

@typing.final
class PermanentWattsPack(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PERMANENT_WATTS_FIELD_NUMBER: builtins.int
    permanent_watts: builtins.int
    def __init__(
        self,
        *,
        permanent_watts: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_permanent_watts", b"_permanent_watts", "permanent_watts", b"permanent_watts"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_permanent_watts", b"_permanent_watts", "permanent_watts", b"permanent_watts"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_permanent_watts", b"_permanent_watts"]) -> typing.Literal["permanent_watts"] | None: ...

global___PermanentWattsPack = PermanentWattsPack

@typing.final
class SupplyPriorityPack(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUPPLY_PRIORITY_FIELD_NUMBER: builtins.int
    supply_priority: builtins.int
    def __init__(
        self,
        *,
        supply_priority: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_supply_priority", b"_supply_priority", "supply_priority", b"supply_priority"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_supply_priority", b"_supply_priority", "supply_priority", b"supply_priority"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_supply_priority", b"_supply_priority"]) -> typing.Literal["supply_priority"] | None: ...

global___SupplyPriorityPack = SupplyPriorityPack

@typing.final
class BatLowerPack(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LOWER_LIMIT_FIELD_NUMBER: builtins.int
    lower_limit: builtins.int
    def __init__(
        self,
        *,
        lower_limit: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_lower_limit", b"_lower_limit", "lower_limit", b"lower_limit"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_lower_limit", b"_lower_limit", "lower_limit", b"lower_limit"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_lower_limit", b"_lower_limit"]) -> typing.Literal["lower_limit"] | None: ...

global___BatLowerPack = BatLowerPack

@typing.final
class BatUpperPack(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UPPER_LIMIT_FIELD_NUMBER: builtins.int
    upper_limit: builtins.int
    def __init__(
        self,
        *,
        upper_limit: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_upper_limit", b"_upper_limit", "upper_limit", b"upper_limit"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_upper_limit", b"_upper_limit", "upper_limit", b"upper_limit"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_upper_limit", b"_upper_limit"]) -> typing.Literal["upper_limit"] | None: ...

global___BatUpperPack = BatUpperPack

@typing.final
class BrightnessPack(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BRIGHTNESS_FIELD_NUMBER: builtins.int
    brightness: builtins.int
    def __init__(
        self,
        *,
        brightness: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_brightness", b"_brightness", "brightness", b"brightness"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_brightness", b"_brightness", "brightness", b"brightness"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_brightness", b"_brightness"]) -> typing.Literal["brightness"] | None: ...

global___BrightnessPack = BrightnessPack

@typing.final
class PowerItem(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TIMESTAMP_FIELD_NUMBER: builtins.int
    TIMEZONE_FIELD_NUMBER: builtins.int
    INV_TO_GRID_POWER_FIELD_NUMBER: builtins.int
    INV_TO_PLUG_POWER_FIELD_NUMBER: builtins.int
    BATTERY_POWER_FIELD_NUMBER: builtins.int
    PV1_OUTPUT_POWER_FIELD_NUMBER: builtins.int
    PV2_OUTPUT_POWER_FIELD_NUMBER: builtins.int
    timestamp: builtins.int
    timezone: builtins.int
    inv_to_grid_power: builtins.int
    inv_to_plug_power: builtins.int
    battery_power: builtins.int
    pv1_output_power: builtins.int
    pv2_output_power: builtins.int
    def __init__(
        self,
        *,
        timestamp: builtins.int | None = ...,
        timezone: builtins.int | None = ...,
        inv_to_grid_power: builtins.int | None = ...,
        inv_to_plug_power: builtins.int | None = ...,
        battery_power: builtins.int | None = ...,
        pv1_output_power: builtins.int | None = ...,
        pv2_output_power: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_battery_power", b"_battery_power", "_inv_to_grid_power", b"_inv_to_grid_power", "_inv_to_plug_power", b"_inv_to_plug_power", "_pv1_output_power", b"_pv1_output_power", "_pv2_output_power", b"_pv2_output_power", "_timestamp", b"_timestamp", "_timezone", b"_timezone", "battery_power", b"battery_power", "inv_to_grid_power", b"inv_to_grid_power", "inv_to_plug_power", b"inv_to_plug_power", "pv1_output_power", b"pv1_output_power", "pv2_output_power", b"pv2_output_power", "timestamp", b"timestamp", "timezone", b"timezone"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_battery_power", b"_battery_power", "_inv_to_grid_power", b"_inv_to_grid_power", "_inv_to_plug_power", b"_inv_to_plug_power", "_pv1_output_power", b"_pv1_output_power", "_pv2_output_power", b"_pv2_output_power", "_timestamp", b"_timestamp", "_timezone", b"_timezone", "battery_power", b"battery_power", "inv_to_grid_power", b"inv_to_grid_power", "inv_to_plug_power", b"inv_to_plug_power", "pv1_output_power", b"pv1_output_power", "pv2_output_power", b"pv2_output_power", "timestamp", b"timestamp", "timezone", b"timezone"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_battery_power", b"_battery_power"]) -> typing.Literal["battery_power"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_to_grid_power", b"_inv_to_grid_power"]) -> typing.Literal["inv_to_grid_power"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_inv_to_plug_power", b"_inv_to_plug_power"]) -> typing.Literal["inv_to_plug_power"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv1_output_power", b"_pv1_output_power"]) -> typing.Literal["pv1_output_power"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pv2_output_power", b"_pv2_output_power"]) -> typing.Literal["pv2_output_power"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_timestamp", b"_timestamp"]) -> typing.Literal["timestamp"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_timezone", b"_timezone"]) -> typing.Literal["timezone"] | None: ...

global___PowerItem = PowerItem

@typing.final
class PowerPack(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SYS_SEQ_FIELD_NUMBER: builtins.int
    SYS_POWER_STREAM_FIELD_NUMBER: builtins.int
    sys_seq: builtins.int
    @property
    def sys_power_stream(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PowerItem]: ...
    def __init__(
        self,
        *,
        sys_seq: builtins.int | None = ...,
        sys_power_stream: collections.abc.Iterable[global___PowerItem] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_sys_seq", b"_sys_seq", "sys_seq", b"sys_seq"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_sys_seq", b"_sys_seq", "sys_power_stream", b"sys_power_stream", "sys_seq", b"sys_seq"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_sys_seq", b"_sys_seq"]) -> typing.Literal["sys_seq"] | None: ...

global___PowerPack = PowerPack

@typing.final
class PowerAckPack(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SYS_SEQ_FIELD_NUMBER: builtins.int
    sys_seq: builtins.int
    def __init__(
        self,
        *,
        sys_seq: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_sys_seq", b"_sys_seq", "sys_seq", b"sys_seq"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_sys_seq", b"_sys_seq", "sys_seq", b"sys_seq"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_sys_seq", b"_sys_seq"]) -> typing.Literal["sys_seq"] | None: ...

global___PowerAckPack = PowerAckPack

@typing.final
class NodeMassage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SN_FIELD_NUMBER: builtins.int
    MAC_FIELD_NUMBER: builtins.int
    sn: builtins.str
    mac: builtins.bytes
    def __init__(
        self,
        *,
        sn: builtins.str | None = ...,
        mac: builtins.bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_mac", b"_mac", "_sn", b"_sn", "mac", b"mac", "sn", b"sn"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_mac", b"_mac", "_sn", b"_sn", "mac", b"mac", "sn", b"sn"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_mac", b"_mac"]) -> typing.Literal["mac"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_sn", b"_sn"]) -> typing.Literal["sn"] | None: ...

global___NodeMassage = NodeMassage

@typing.final
class MeshChildNodeInfo(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TOPOLOGY_TYPE_FIELD_NUMBER: builtins.int
    MESH_PROTOCOL_FIELD_NUMBER: builtins.int
    MAX_SUB_DEVICE_NUM_FIELD_NUMBER: builtins.int
    PARENT_MAC_ID_FIELD_NUMBER: builtins.int
    MESH_ID_FIELD_NUMBER: builtins.int
    SUB_DEVICE_LIST_FIELD_NUMBER: builtins.int
    topology_type: builtins.int
    mesh_protocol: builtins.int
    max_sub_device_num: builtins.int
    parent_mac_id: builtins.bytes
    mesh_id: builtins.bytes
    @property
    def sub_device_list(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NodeMassage]: ...
    def __init__(
        self,
        *,
        topology_type: builtins.int | None = ...,
        mesh_protocol: builtins.int | None = ...,
        max_sub_device_num: builtins.int | None = ...,
        parent_mac_id: builtins.bytes | None = ...,
        mesh_id: builtins.bytes | None = ...,
        sub_device_list: collections.abc.Iterable[global___NodeMassage] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_max_sub_device_num", b"_max_sub_device_num", "_mesh_id", b"_mesh_id", "_mesh_protocol", b"_mesh_protocol", "_parent_mac_id", b"_parent_mac_id", "_topology_type", b"_topology_type", "max_sub_device_num", b"max_sub_device_num", "mesh_id", b"mesh_id", "mesh_protocol", b"mesh_protocol", "parent_mac_id", b"parent_mac_id", "topology_type", b"topology_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_max_sub_device_num", b"_max_sub_device_num", "_mesh_id", b"_mesh_id", "_mesh_protocol", b"_mesh_protocol", "_parent_mac_id", b"_parent_mac_id", "_topology_type", b"_topology_type", "max_sub_device_num", b"max_sub_device_num", "mesh_id", b"mesh_id", "mesh_protocol", b"mesh_protocol", "parent_mac_id", b"parent_mac_id", "sub_device_list", b"sub_device_list", "topology_type", b"topology_type"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_max_sub_device_num", b"_max_sub_device_num"]) -> typing.Literal["max_sub_device_num"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_mesh_id", b"_mesh_id"]) -> typing.Literal["mesh_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_mesh_protocol", b"_mesh_protocol"]) -> typing.Literal["mesh_protocol"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_parent_mac_id", b"_parent_mac_id"]) -> typing.Literal["parent_mac_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_topology_type", b"_topology_type"]) -> typing.Literal["topology_type"] | None: ...

global___MeshChildNodeInfo = MeshChildNodeInfo

@typing.final
class PrivateAPIGenericSetValue(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    value: builtins.int
    def __init__(
        self,
        *,
        value: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_value", b"_value", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_value", b"_value", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_value", b"_value"]) -> typing.Literal["value"] | None: ...

global___PrivateAPIGenericSetValue = PrivateAPIGenericSetValue
