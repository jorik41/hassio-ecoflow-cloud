"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Header(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PDATA_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    DEST_FIELD_NUMBER: builtins.int
    D_SRC_FIELD_NUMBER: builtins.int
    D_DEST_FIELD_NUMBER: builtins.int
    ENC_TYPE_FIELD_NUMBER: builtins.int
    CHECK_TYPE_FIELD_NUMBER: builtins.int
    CMD_FUNC_FIELD_NUMBER: builtins.int
    CMD_ID_FIELD_NUMBER: builtins.int
    DATA_LEN_FIELD_NUMBER: builtins.int
    NEED_ACK_FIELD_NUMBER: builtins.int
    IS_ACK_FIELD_NUMBER: builtins.int
    SEQ_FIELD_NUMBER: builtins.int
    PRODUCT_ID_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    PAYLOAD_VER_FIELD_NUMBER: builtins.int
    TIME_SNAP_FIELD_NUMBER: builtins.int
    IS_RW_CMD_FIELD_NUMBER: builtins.int
    IS_QUEUE_FIELD_NUMBER: builtins.int
    ACK_TYPE_FIELD_NUMBER: builtins.int
    CODE_FIELD_NUMBER: builtins.int
    FROM_FIELD_NUMBER: builtins.int
    MODULE_SN_FIELD_NUMBER: builtins.int
    DEVICE_SN_FIELD_NUMBER: builtins.int
    pdata: builtins.bytes
    src: builtins.int
    dest: builtins.int
    d_src: builtins.int
    d_dest: builtins.int
    enc_type: builtins.int
    check_type: builtins.int
    cmd_func: builtins.int
    cmd_id: builtins.int
    data_len: builtins.int
    need_ack: builtins.int
    is_ack: builtins.int
    seq: builtins.int
    product_id: builtins.int
    version: builtins.int
    payload_ver: builtins.int
    time_snap: builtins.int
    is_rw_cmd: builtins.int
    is_queue: builtins.int
    ack_type: builtins.int
    code: builtins.str
    module_sn: builtins.str
    device_sn: builtins.str
    def __init__(
        self,
        *,
        pdata: builtins.bytes | None = ...,
        src: builtins.int | None = ...,
        dest: builtins.int | None = ...,
        d_src: builtins.int | None = ...,
        d_dest: builtins.int | None = ...,
        enc_type: builtins.int | None = ...,
        check_type: builtins.int | None = ...,
        cmd_func: builtins.int | None = ...,
        cmd_id: builtins.int | None = ...,
        data_len: builtins.int | None = ...,
        need_ack: builtins.int | None = ...,
        is_ack: builtins.int | None = ...,
        seq: builtins.int | None = ...,
        product_id: builtins.int | None = ...,
        version: builtins.int | None = ...,
        payload_ver: builtins.int | None = ...,
        time_snap: builtins.int | None = ...,
        is_rw_cmd: builtins.int | None = ...,
        is_queue: builtins.int | None = ...,
        ack_type: builtins.int | None = ...,
        code: builtins.str | None = ...,
        module_sn: builtins.str | None = ...,
        device_sn: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_ack_type", b"_ack_type", "_check_type", b"_check_type", "_cmd_func", b"_cmd_func", "_cmd_id", b"_cmd_id", "_code", b"_code", "_d_dest", b"_d_dest", "_d_src", b"_d_src", "_data_len", b"_data_len", "_dest", b"_dest", "_device_sn", b"_device_sn", "_enc_type", b"_enc_type", "_from", b"_from", "_is_ack", b"_is_ack", "_is_queue", b"_is_queue", "_is_rw_cmd", b"_is_rw_cmd", "_module_sn", b"_module_sn", "_need_ack", b"_need_ack", "_payload_ver", b"_payload_ver", "_pdata", b"_pdata", "_product_id", b"_product_id", "_seq", b"_seq", "_src", b"_src", "_time_snap", b"_time_snap", "_version", b"_version", "ack_type", b"ack_type", "check_type", b"check_type", "cmd_func", b"cmd_func", "cmd_id", b"cmd_id", "code", b"code", "d_dest", b"d_dest", "d_src", b"d_src", "data_len", b"data_len", "dest", b"dest", "device_sn", b"device_sn", "enc_type", b"enc_type", "from", b"from", "is_ack", b"is_ack", "is_queue", b"is_queue", "is_rw_cmd", b"is_rw_cmd", "module_sn", b"module_sn", "need_ack", b"need_ack", "payload_ver", b"payload_ver", "pdata", b"pdata", "product_id", b"product_id", "seq", b"seq", "src", b"src", "time_snap", b"time_snap", "version", b"version"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_ack_type", b"_ack_type", "_check_type", b"_check_type", "_cmd_func", b"_cmd_func", "_cmd_id", b"_cmd_id", "_code", b"_code", "_d_dest", b"_d_dest", "_d_src", b"_d_src", "_data_len", b"_data_len", "_dest", b"_dest", "_device_sn", b"_device_sn", "_enc_type", b"_enc_type", "_from", b"_from", "_is_ack", b"_is_ack", "_is_queue", b"_is_queue", "_is_rw_cmd", b"_is_rw_cmd", "_module_sn", b"_module_sn", "_need_ack", b"_need_ack", "_payload_ver", b"_payload_ver", "_pdata", b"_pdata", "_product_id", b"_product_id", "_seq", b"_seq", "_src", b"_src", "_time_snap", b"_time_snap", "_version", b"_version", "ack_type", b"ack_type", "check_type", b"check_type", "cmd_func", b"cmd_func", "cmd_id", b"cmd_id", "code", b"code", "d_dest", b"d_dest", "d_src", b"d_src", "data_len", b"data_len", "dest", b"dest", "device_sn", b"device_sn", "enc_type", b"enc_type", "from", b"from", "is_ack", b"is_ack", "is_queue", b"is_queue", "is_rw_cmd", b"is_rw_cmd", "module_sn", b"module_sn", "need_ack", b"need_ack", "payload_ver", b"payload_ver", "pdata", b"pdata", "product_id", b"product_id", "seq", b"seq", "src", b"src", "time_snap", b"time_snap", "version", b"version"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_ack_type", b"_ack_type"]) -> typing.Literal["ack_type"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_check_type", b"_check_type"]) -> typing.Literal["check_type"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_cmd_func", b"_cmd_func"]) -> typing.Literal["cmd_func"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_cmd_id", b"_cmd_id"]) -> typing.Literal["cmd_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_code", b"_code"]) -> typing.Literal["code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_d_dest", b"_d_dest"]) -> typing.Literal["d_dest"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_d_src", b"_d_src"]) -> typing.Literal["d_src"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_data_len", b"_data_len"]) -> typing.Literal["data_len"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_dest", b"_dest"]) -> typing.Literal["dest"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_device_sn", b"_device_sn"]) -> typing.Literal["device_sn"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_enc_type", b"_enc_type"]) -> typing.Literal["enc_type"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_from", b"_from"]) -> typing.Literal["from"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_is_ack", b"_is_ack"]) -> typing.Literal["is_ack"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_is_queue", b"_is_queue"]) -> typing.Literal["is_queue"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_is_rw_cmd", b"_is_rw_cmd"]) -> typing.Literal["is_rw_cmd"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_module_sn", b"_module_sn"]) -> typing.Literal["module_sn"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_need_ack", b"_need_ack"]) -> typing.Literal["need_ack"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_payload_ver", b"_payload_ver"]) -> typing.Literal["payload_ver"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pdata", b"_pdata"]) -> typing.Literal["pdata"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_product_id", b"_product_id"]) -> typing.Literal["product_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_seq", b"_seq"]) -> typing.Literal["seq"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_src", b"_src"]) -> typing.Literal["src"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_time_snap", b"_time_snap"]) -> typing.Literal["time_snap"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_version", b"_version"]) -> typing.Literal["version"] | None: ...

global___Header = Header

@typing.final
class SendHeaderMsg(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MSG_FIELD_NUMBER: builtins.int
    @property
    def msg(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Header]: ...
    def __init__(
        self,
        *,
        msg: collections.abc.Iterable[global___Header] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["msg", b"msg"]) -> None: ...

global___SendHeaderMsg = SendHeaderMsg

@typing.final
class SendMsgHart(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LINK_ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    DEST_FIELD_NUMBER: builtins.int
    D_SRC_FIELD_NUMBER: builtins.int
    D_DEST_FIELD_NUMBER: builtins.int
    ENC_TYPE_FIELD_NUMBER: builtins.int
    CHECK_TYPE_FIELD_NUMBER: builtins.int
    CMD_FUNC_FIELD_NUMBER: builtins.int
    CMD_ID_FIELD_NUMBER: builtins.int
    DATA_LEN_FIELD_NUMBER: builtins.int
    NEED_ACK_FIELD_NUMBER: builtins.int
    IS_ACK_FIELD_NUMBER: builtins.int
    ACK_TYPE_FIELD_NUMBER: builtins.int
    SEQ_FIELD_NUMBER: builtins.int
    TIME_SNAP_FIELD_NUMBER: builtins.int
    IS_RW_CMD_FIELD_NUMBER: builtins.int
    IS_QUEUE_FIELD_NUMBER: builtins.int
    PRODUCT_ID_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    link_id: builtins.int
    src: builtins.int
    dest: builtins.int
    d_src: builtins.int
    d_dest: builtins.int
    enc_type: builtins.int
    check_type: builtins.int
    cmd_func: builtins.int
    cmd_id: builtins.int
    data_len: builtins.int
    need_ack: builtins.int
    is_ack: builtins.int
    ack_type: builtins.int
    seq: builtins.int
    time_snap: builtins.int
    is_rw_cmd: builtins.int
    is_queue: builtins.int
    product_id: builtins.int
    version: builtins.int
    def __init__(
        self,
        *,
        link_id: builtins.int | None = ...,
        src: builtins.int | None = ...,
        dest: builtins.int | None = ...,
        d_src: builtins.int | None = ...,
        d_dest: builtins.int | None = ...,
        enc_type: builtins.int | None = ...,
        check_type: builtins.int | None = ...,
        cmd_func: builtins.int | None = ...,
        cmd_id: builtins.int | None = ...,
        data_len: builtins.int | None = ...,
        need_ack: builtins.int | None = ...,
        is_ack: builtins.int | None = ...,
        ack_type: builtins.int | None = ...,
        seq: builtins.int | None = ...,
        time_snap: builtins.int | None = ...,
        is_rw_cmd: builtins.int | None = ...,
        is_queue: builtins.int | None = ...,
        product_id: builtins.int | None = ...,
        version: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_ack_type", b"_ack_type", "_check_type", b"_check_type", "_cmd_func", b"_cmd_func", "_cmd_id", b"_cmd_id", "_d_dest", b"_d_dest", "_d_src", b"_d_src", "_data_len", b"_data_len", "_dest", b"_dest", "_enc_type", b"_enc_type", "_is_ack", b"_is_ack", "_is_queue", b"_is_queue", "_is_rw_cmd", b"_is_rw_cmd", "_link_id", b"_link_id", "_need_ack", b"_need_ack", "_product_id", b"_product_id", "_seq", b"_seq", "_src", b"_src", "_time_snap", b"_time_snap", "_version", b"_version", "ack_type", b"ack_type", "check_type", b"check_type", "cmd_func", b"cmd_func", "cmd_id", b"cmd_id", "d_dest", b"d_dest", "d_src", b"d_src", "data_len", b"data_len", "dest", b"dest", "enc_type", b"enc_type", "is_ack", b"is_ack", "is_queue", b"is_queue", "is_rw_cmd", b"is_rw_cmd", "link_id", b"link_id", "need_ack", b"need_ack", "product_id", b"product_id", "seq", b"seq", "src", b"src", "time_snap", b"time_snap", "version", b"version"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_ack_type", b"_ack_type", "_check_type", b"_check_type", "_cmd_func", b"_cmd_func", "_cmd_id", b"_cmd_id", "_d_dest", b"_d_dest", "_d_src", b"_d_src", "_data_len", b"_data_len", "_dest", b"_dest", "_enc_type", b"_enc_type", "_is_ack", b"_is_ack", "_is_queue", b"_is_queue", "_is_rw_cmd", b"_is_rw_cmd", "_link_id", b"_link_id", "_need_ack", b"_need_ack", "_product_id", b"_product_id", "_seq", b"_seq", "_src", b"_src", "_time_snap", b"_time_snap", "_version", b"_version", "ack_type", b"ack_type", "check_type", b"check_type", "cmd_func", b"cmd_func", "cmd_id", b"cmd_id", "d_dest", b"d_dest", "d_src", b"d_src", "data_len", b"data_len", "dest", b"dest", "enc_type", b"enc_type", "is_ack", b"is_ack", "is_queue", b"is_queue", "is_rw_cmd", b"is_rw_cmd", "link_id", b"link_id", "need_ack", b"need_ack", "product_id", b"product_id", "seq", b"seq", "src", b"src", "time_snap", b"time_snap", "version", b"version"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_ack_type", b"_ack_type"]) -> typing.Literal["ack_type"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_check_type", b"_check_type"]) -> typing.Literal["check_type"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_cmd_func", b"_cmd_func"]) -> typing.Literal["cmd_func"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_cmd_id", b"_cmd_id"]) -> typing.Literal["cmd_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_d_dest", b"_d_dest"]) -> typing.Literal["d_dest"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_d_src", b"_d_src"]) -> typing.Literal["d_src"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_data_len", b"_data_len"]) -> typing.Literal["data_len"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_dest", b"_dest"]) -> typing.Literal["dest"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_enc_type", b"_enc_type"]) -> typing.Literal["enc_type"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_is_ack", b"_is_ack"]) -> typing.Literal["is_ack"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_is_queue", b"_is_queue"]) -> typing.Literal["is_queue"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_is_rw_cmd", b"_is_rw_cmd"]) -> typing.Literal["is_rw_cmd"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_link_id", b"_link_id"]) -> typing.Literal["link_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_need_ack", b"_need_ack"]) -> typing.Literal["need_ack"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_product_id", b"_product_id"]) -> typing.Literal["product_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_seq", b"_seq"]) -> typing.Literal["seq"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_src", b"_src"]) -> typing.Literal["src"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_time_snap", b"_time_snap"]) -> typing.Literal["time_snap"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_version", b"_version"]) -> typing.Literal["version"] | None: ...

global___SendMsgHart = SendMsgHart
